7) Comparator : 
Simulation : 
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity COMPARATOR_SOURCE is
 Port ( A : in STD_LOGIC_VECTOR (1 downto 0);
 G,L,E : out STD_LOGIC);
end COMPARATOR_SOURCE;
architecture Behavioral of COMPARATOR_SOURCE is
begin
process (A)
begin
G <= '0';
L <= '0';
E <= '0';
if (A(0) < A(1)) then
L <= '1';
elsif (A(0) > A(1)) then
G <= '1';
else
E <= '1';
end if;
end process;
end Behavioral;
Simulation : 
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity comparator_tb is
end entity;
architecture tb of comparator_tb is
component COMPARATOR_SOURCE is
Port ( A : in STD_LOGIC_VECTOR (1 downto 0);
G,L,E : out STD_LOGIC);
end component;
signal A : STD_LOGIC_VECTOR(1 downto 0);
signal G, L, E : STD_LOGIC;
begin
uut: COMPARATOR_SOURCE port map(
A => A, G => G,
L => L, E => E);
stim: process
begin
A <= "00";
wait for 20 ns;
A <= "01";
wait for 20 ns;
A <= "10";
wait for 20 ns;
A <= "11";
wait for 20 ns;
wait;
end process;
end tb;